{"version":3,"file":"Application.js","sourceRoot":"","sources":["../src/Application.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACjE,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,MAAM,CAAC,MAAM,gBAAgB,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1F,MAAM,CAAC,MAAM,kBAAkB,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9F,MAAM,CAAC,MAAM,eAAe,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;AACxF,MAAM,CAAC,MAAM,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1E,MAAM,CAAC,IAAI,eAAe,CAAC;AAC3B,MAAM,CAAC,IAAI,SAAS,CAAC;AACrB,IAAG,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAC;IACvB,SAAS,GAAG,IAAI,CAAC;IACjB,eAAe,GAAG,IAAI,CAAC;CACxB;KACG;IACF,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/D,eAAe,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;CAC5E;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;KAC7E;IACD,OAAO,MAAM,eAAe,CAAC,sBAAsB,EAAE,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,CAAC,eAAe,CAAC,wBAAwB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,CAAC;KAC/E;IACD,OAAO,MAAM,eAAe,CAAC,wBAAwB,EAAE,CAAC;AAC1D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;KAC7E;IACD,OAAO,MAAM,eAAe,CAAC,sBAAsB,EAAE,CAAC;AACxD,CAAC","sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoApplication from './ExpoApplication';\n\nexport const nativeAppVersion = ExpoApplication ? ExpoApplication.nativeAppVersion : null;\nexport const nativeBuildVersion = ExpoApplication ? ExpoApplication.nativeBuildVersion : null;\nexport const applicationName = ExpoApplication ? ExpoApplication.applicationName : null;\nexport const bundleId = ExpoApplication ? ExpoApplication.bundleId : null;\nexport let installReferrer;\nexport let androidId;\nif(Platform.OS === 'ios'){\n  androidId = null;\n  installReferrer = null;\n}\nelse{\n  androidId = ExpoApplication ? ExpoApplication.androidId : null;\n  installReferrer = ExpoApplication ? ExpoApplication.installReferrer : null;\n}\n\nexport async function getIosIdForVendorAsync(): Promise<string> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return await ExpoApplication.getIosIdForVendorAsync();\n}\n\nexport async function getFirstInstallTimeAsync(): Promise<number> {\n  if (!ExpoApplication.getFirstInstallTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getFirstInstallTimeAsync');\n  }\n  return await ExpoApplication.getFirstInstallTimeAsync();\n}\n\nexport async function getLastUpdateTimeAsync(): Promise<number> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  return await ExpoApplication.getLastUpdateTimeAsync();\n}\n"]}